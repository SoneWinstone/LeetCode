/**

 * Definition for singly-linked list.

 * public class ListNode {

 *     int val;

 *     ListNode next;

 *     ListNode(int x) { val = x; }

 * }

 */

public class Solution {

    private int temp = 0;

	private boolean flag = false;

	

	public ListNode addTwoNumbers(ListNode l1, ListNode l2) {

		//rst = l1 + l2 

		ListNode rst = new ListNode(0);

		ListNode temp1 = l1, temp2 = l2, ret = rst;

		while(l1.next != null && l2.next != null) {

			calcRst(rst, l1, l2);

			l1 = l1.next;

			l2 = l2.next;

			rst.next = new ListNode(0);

			rst = rst.next;

		}

		if(l1.next != null) {

			calcRst(rst, l1, l2);

			rst.next = new ListNode(0);

			rst = rst.next;

			l1 = l1.next;

			while(l1.next != null) {

				calcRst(rst, l1);

				rst.next = new ListNode(0);

				rst = rst.next;

				l1 = l1.next;

			}

			calcRst(rst, l1);

			if(flag) {

				rst.next = new ListNode(1);

				rst = rst.next;

			}

		} else if(l2.next != null){

			calcRst(rst, l1, l2);

			rst.next = new ListNode(0);

			rst = rst.next;

			l2 = l2.next;

			while(l2.next != null) {

				calcRst(rst, l2);

				rst.next = new ListNode(0);

				rst = rst.next;

				l2 = l2.next;

			}

			calcRst(rst, l2);

			if(flag) {

				rst.next = new ListNode(1);

				rst = rst.next;

			}

		} else {

			temp = (flag?1:0) + l1.val + l2.val;

			if(flag) {

				flag = false;

			}

			if(temp > 9) {

				flag = true;

				temp = temp - 10;

			}

			rst.val = temp;

			if(flag) {

				rst.next = new ListNode(1);

				rst = rst.next;

			}

		}

		return ret;

	}



	private void calcRst(ListNode rst, ListNode l1, ListNode l2) {

		// TODO Auto-generated method stub

		temp = (flag?1:0) + l1.val + l2.val;

		if(flag) {

			flag = false;

		}

		if(temp > 9) {

			flag = true;

			temp = temp - 10;

		}

		rst.val = temp;

	}

	

	private void calcRst(ListNode rst, ListNode l) {

		this.calcRst(rst, l, new ListNode(0));

	}

}
